import os
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from typing import Dict, Any, List

from dotenv import load_dotenv
load_dotenv()

SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")
slack_client = WebClient(token=SLACK_BOT_TOKEN)

def send_slack_message(channel_id: str, message_text: str) -> Dict[str, Any]:
    """
    Sends a message to a specified Slack channel.
    """
    if not SLACK_BOT_TOKEN:
        print("Error: SLACK_BOT_TOKEN is not set in environment variables.")
        return {"error": "Slack bot token is not configured."}

    try:
        response = slack_client.chat_postMessage(
            channel=channel_id,
            text=message_text,
            mrkdwn=True
        )
        print(f"Slack message sent to {channel_id}: {response['ts']}")
        return {"success": True, "ts": response["ts"], "channel": response["channel"]}
    except SlackApiError as e:
        print(f"Error sending Slack message: {e.response['error']}")
        return {"error": f"Slack API error: {e.response['error']}"}
    except Exception as e:
        print(f"An unexpected error occurred while sending Slack message: {e}")
        return {"error": f"Failed to send Slack message: {e}"}

def format_meeting_analysis_for_slack(meeting_analysis: Dict[str, Any], export_format: str) -> str:
    sections = []

    # Header with basic identifiers
    sections.append(f"*🆔 Meeting ID:* `{meeting_analysis.get('meeting_id', 'N/A')}`")
    sections.append(f"*📅 Date & Time:* {meeting_analysis.get('timestamp', 'N/A')}`")
    sections.append("")

    # Summary Section
    if export_format in ["summary_only", "summary_and_tasks"]:
        summary = meeting_analysis.get("summary", "No summary was generated.")
        sections.append("*📝 Meeting Summary:*")
        sections.append(f"> {summary.strip()}")
        sections.append("")

    # Action Items Section
    if export_format in ["tasks_only", "summary_and_tasks"]:
        action_items = meeting_analysis.get('action_items', [])
        if action_items:
            sections.append("*🧩 Action Items:*")
            for idx, item in enumerate(action_items, start=1):
                task = item.get('task', 'N/A')
                assignee = item.get('assignee', 'Unassigned')
                deadline = item.get('deadline', 'No deadline specified')
                status = item.get('status', 'new')
                sections.append(
                    f"{idx}. *Task:* {task}\n"
                    f"   • *Assigned To:* {assignee}\n"
                    f"   • *Deadline:* {deadline}\n"
                    f"   • *Status:* {status.capitalize()}"
                )
            sections.append("")
        else:
            sections.append("_There are no actionable tasks identified in this meeting._")
            sections.append("")

    # Key Decisions Section
    if export_format == "summary_and_tasks":
        key_decisions = meeting_analysis.get('key_decisions', [])
        if key_decisions:
            sections.append("*📌 Key Decisions:*")
            for decision in key_decisions:
                desc = decision.get('description', 'N/A')
                participants = ", ".join(decision.get('participants_involved', [])) or "N/A"
                date = decision.get('date_made', 'N/A')
                sections.append(
                    f"*Decision:* {desc}\n"
                    f"   • *Participants Involved:* {participants}\n"
                    f"   • *Date:* {date}"
                )
            sections.append("")
        else:
            sections.append("_No significant decisions were recorded during the meeting._")
            sections.append("")

    # Contextual Intelligence Section
    tone = meeting_analysis.get("tone_overview")
    topics = meeting_analysis.get("important_topics")
    speakers = meeting_analysis.get("speakers_detected")

    if any([tone, topics, speakers]):
        sections.append("*🧠 Additional Context:*")
        if speakers:
            sections.append(f"• *Speakers Identified:* {', '.join(speakers)}")
        if tone:
            sections.append(f"• *Overall Tone:* {tone}")
        if topics:
            sections.append(f"• *Main Topics Discussed:* {', '.join(topics)}")
        sections.append("")

    sections.append("_Generated by your AI Meeting Assistant_")

    return "\n".join(sections)
